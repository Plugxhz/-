local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "PLUG HUB " .. Fluent.Version,
    SubTitle = "KEY SYSTEM",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

-- Função para obter a chave a partir de um link
local function GetKeyFromLink(link)
    local httpService = game:GetService("HttpService")
    local response = httpService:GetAsync(link)
    return response
end

-- Link para obter a chave
local linkToKey = "https://link-target.net/1078704/plug-hub-key"

-- Adicionando uma notificação para orientar o usuário
Fluent:Notify({
    Title = "Info",
    Content = "Por favor, clique no botão 'Pegar Key' para obter sua chave.",
    Duration = 5
})

-- Adicionando um botão para pegar a chave do link
local GetKeyButton = Tabs.Main:AddButton({
    Title = "Pegar Key",
    Description = "Clique aqui para obter sua chave!",
    Callback = function()
        -- Copiar o link para a área de transferência
        setclipboard(linkToKey)
        -- Exibir uma notificação informando que o link foi copiado
        Fluent:Notify({
            Title = "Info",
            Content = "O link para pegar a chave foi copiado para a área de transferência!",
            Duration = 5
        })
    end
})

-- Adicionando um campo para inserir a chave manualmente
local KeyInput = Tabs.Main:AddInput("KeyInput", {
    Title = "Inserir Chave",
    Default = "",  -- Pode definir uma chave padrão aqui se preferir
    Placeholder = "Insira sua chave aqui!"
})

-- Adicionando um botão para verificar a chave manualmente
local CheckKeyButton = Tabs.Main:AddButton({
    Title = "Checar Chave",
    Description = "Clique aqui para verificar a chave!",
    Callback = function()
        local enteredKey = KeyInput.Value -- Corrigido
        if enteredKey == "CHAVE090807060504030201" then
            print("Carregando script...")
            wait(6) -- Tempo de carregamento
            loadstring(game:HttpGet("https://raw.githubusercontent.com/Plugxhz/-/main/Plug's%20Hub"))()
            -- Notificação de chave correta
            Fluent:Notify({
                Title = "Sucesso",
                Content = "Chave correta! O HUB foi carregado!",
                Duration = 2 -- Alterado para 2 segundos
            })
            -- Fechar a interface após a notificação desaparecer
            task.spawn(function()
                wait(2) -- Tempo para a notificação desaparecer
                Fluent.Destroy(Window)
            end)
        else
            print("Chave incorreta.")
            Fluent:Notify({
                Title = "Error",
                Content = "Chave incorreta. Por favor, tente novamente."
            })
        end
    end
})


-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "PLUG'S HUB",
    Content = "O script foi carregado.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
