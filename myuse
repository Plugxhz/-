GlobalConfig = {}

GlobalConfig['Rayfield'] = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

GlobalConfig['Window'] = Rayfield:CreateWindow({
   Name = "Ascended Hub -- Premium Mobile | Last Update 11/24/24 |",
   LoadingTitle = "|-  I Always Back  -|",
   LoadingSubtitle = "by Plug 愛",
   Theme = "Serenity",

   DisableRayfieldPrompts = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = Dupe,
      FileName = "Plug Config"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

GlobalConfig['Cache'] = { DevConfig = {} };


Cache.DevConfig["ListOfDrink"] = {"Cider+", "Cider", "Lemonade+", "Lemonade", "Juice+", "Juice", "Smoothie+", "Smoothie"};
Cache.DevConfig["ListOfIsland"] = {"Grassy","Kaizu","Snow Mountains","Pursuer Boss","Bar",
	                           "Cliffs","Windmill", "Cave","Krizma","Sam","Green","Trees",
	                           "Pyramid","Package","Snowy","Mountain","Marine Ford","Sand Castle",
	                           "Forest","Evil","Crescent","Islands","Town","Rocky","Palm","Sand",
	                           "Sand 2","Small","Tiny","Super Tiny","Grass","Atlar"};
Cache.DevConfig["ListOfMerchant"] = {"Rayleigh", "Better Drink", "Drink", "Flail", "QuestFish", "Krizma", "Sword", "Sniper", "Emote", "Affinity","Fish", "Expertise"};
Cache.DevConfig["ListOfAffinities"] = {"Devil Fruit ( Left )", "Devil Fruit ( Right )"};

GlobalConfig['kick'] = false
GlobalConfig['Pedo'] = {
    1135910299, -- Havelic
    1619950875, -- Pixel_SkillzSPIN2
    1581720092, -- Pixel_SkillzSPIN
    1661505948, -- Pixel_SkillzBARRIER
    679804290, -- Pixel_Skillz
    520944, -- Oblivic
    43247021, -- BowTiedPony
    2350183594, -- icydragonwingsis
    1338963426, -- happypandamagic2
    1276541545, -- VanitasThePlague
    587649463, -- happypandamagic
    245586741, -- Tiptop98
    174941504, -- FoxKingFab
    136099207,-- CudlessTheCat
    94825741, -- NATSUDRAGN331
    358051152, -- VortexFragmented
    529455640, -- vlonedd
    281482099, -- Quixotize
    355207559, -- Elianmc1s
    5084487, -- Americanflag
    928623624, -- TrashPanda2361
    30049170, -- Farquanetta
    474452017 -- Bige0n
    }

for _, v in pairs(game:GetService("Players"):GetPlayers()) do
    for _, v1 in pairs(Pedo) do
        if v.UserId == v1 then
            game:GetService("Players").LocalPlayer:Kick("Admin is in the server")
        end
    end
end

game:GetService("Players").PlayerAdded:Connect(function(r)
    for _, v in pairs(Pedo) do
        if r.UserId == v then
            game:GetService("Players").LocalPlayer:Kick("Admin or Staff has joined the server")
        end
    end
end)

GlobalConfig['listed'] = {
    902805881, -- SpinEnzo
    2299513524, -- CalangoBranco02
    211788923, -- pedrogames332006
    2452645318, -- Kirito332006
    4160995852, -- LordSeraphinAlt1
    4161047726, -- LordSeraphinAlt3
    4161002638, -- LordSeraphinAlt2
    3017271869, -- LordVallentine
    837781993, -- doubTedcelery89
    1229634641, -- Marisson251
    818470168, -- Traolaw10
}

GlobalConfig['WhiteListed'] = false
for _, v1 in pairs(listed) do
    if game.Players.LocalPlayer.UserId == v1 then
GlobalConfig['WhiteListed'] = true
        break
    end
end

if _G.WhiteListed or _G.bypasschothgngukhoi then
GlobalConfig['kick'] = true
    if game.PlaceId == 8569358381 or game.PlaceId == 3237168 then
GlobalConfig['vu'] = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            task.wait(1)
            vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end)

GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['cache'] = {}

        function lol(name)
            if cache[name] then return cache[name] end
            local id
GlobalConfig['success, result'] = pcall(function()
                return Players:GetUserIdFromNameAsync(name)
            end)
            if success then
                id = result
            else
                warn("Erro ao buscar o UserId para o nome:", name)
            end
            cache[name] = id
            return id
        end
    end
else
    game.Players.LocalPlayer:Kick("KICKED      By Plug 愛    Warn: You Need Buy Script - discord.gg/mzuYhzfwv7")
end

GlobalConfig['MainTab'] = Window:CreateTab("Main", "book-copy")
GlobalConfig['StorageTab'] = Window:CreateTab("Storage", "boxes")
GlobalConfig['FarmTab'] = Window:CreateTab("Farm", "box")
GlobalConfig['MiscTab'] = Window:CreateTab("Misc", "keyboard-music")
GlobalConfig['PlayerTab'] = Window:CreateTab("Players", "users")
GlobalConfig['ShopTab'] = Window:CreateTab("Shop", "shopping-cart")
GlobalConfig['NpcTab'] = Window:CreateTab("Npc", "bot")
GlobalConfig['IslandsTab'] = Window:CreateTab("Islands", "tree-palm")
GlobalConfig['OtherTab'] = Window:CreateTab("Others", "arrow-down-wide-narrow")
GlobalConfig['SkillsTab'] = Window:CreateTab("Skills", "bomb")
GlobalConfig['WebHookTab'] = Window:CreateTab("Webhook", "rss")

-- Main Tab - Section e Botões/Toggles

GlobalConfig['MainSection'] = MainTab:CreateSection("Main Utilities")

GlobalConfig['Button'] = MainTab:CreateButton({
    Name = "Destroy Script",
    Callback = function()
        Rayfield:Destroy()
    end
})

GlobalConfig['Toggle'] = MainTab:CreateToggle({
    Name = "Auto Spawn",
    CurrentValue = false,
    Flag = "AutoSpawnToggle",
    Callback = function(Value)
GlobalConfig['AutoSpawnn'] = Value
        if _G.AutoSpawnn then
            spawn(function()
                while _G.AutoSpawnn do
                    task.wait()
                    pcall(function()
GlobalConfig['Player'] = game:GetService("Players").LocalPlayer
GlobalConfig['LoadFrame'] = Player.PlayerGui:FindFirstChild("Load") and Player.PlayerGui.Load.Frame
                        if LoadFrame and LoadFrame.Visible then
                            repeat
                                task.wait(3)
                                for _, connection in pairs(getconnections(LoadFrame.Load.MouseButton1Click)) do
                                    connection.Function() -- Executa a função conectada ao botão
                                end
                            until not LoadFrame.Visible
                        end
                    end)
                end
            end)
        end
    end,
})


GlobalConfig['MainSection'] = MainTab:CreateSection("Sam Quest's Utilities")


GlobalConfig['Button'] = MainTab:CreateButton({
   Name = "Open Sam",
   Callback = function()
       fireclickdetector(game:GetService("Workspace").Merchants.QuestMerchant.Clickable.ClickDetector)
   end,
})

GlobalConfig['Button'] = MainTab:CreateButton({
    Name = "Claim One Compass",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Claim1"
        }
        
        workspace.Merchants.QuestMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})

GlobalConfig['Button'] = MainTab:CreateButton({
    Name = "Claim All Compass",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Claim10"
        }
        
        workspace.Merchants.QuestMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})

GlobalConfig['Toggle'] = MainTab:CreateToggle({
    Name = "Auto Claim Compass",
    CurrentValue = false,
    Callback = function(Value)
        AutoClaimCompass = Value
    end
})

spawn(function()
    while wait() do
        if AutoClaimCompass then
GlobalConfig['args'] = {
                [1] = "Claim10"
            }
            
            workspace.Merchants.QuestMerchant.Clickable.Retum:FireServer(unpack(args))
        end
    end
end)

GlobalConfig['AutoCompass'] = false

GlobalConfig['Toggle'] = MainTab:CreateToggle({
    Name = "Auto Use Compass (Teleports to Position)",
    CurrentValue = false,
    Callback = function(Value)
        AutoCompass = Value
    end
})

spawn(function()
    while wait() do
        if AutoCompass then
            pcall(function()
                -- Referências do jogador e de seu personagem
GlobalConfig['player'] = game.Players.LocalPlayer
GlobalConfig['backpack'] = player.Backpack
GlobalConfig['character'] = player.Character or player.CharacterAdded:Wait()

                -- Iterar pelos itens no inventário
                for _, item in pairs(backpack:GetChildren()) do
                    if item.Name == "Compass" then
                        -- Equipar o Compass
                        item.Parent = character
                        wait(0.1) -- Pequeno delay para garantir o equipamento

                        -- Verificar se o Compass foi equipado com sucesso
                        if character:FindFirstChild("Compass") then
GlobalConfig['compass'] = character.Compass

                            -- Teleportar para a posição do Compass
                            if compass:FindFirstChild("Poser") and compass.Poser.Value then
                                character.HumanoidRootPart.CFrame = CFrame.new(compass.Poser.Value)
                                wait(0.2) -- Delay para garantir o teleporte

                                -- Ativar o Compass diretamente
                                compass:Activate()

                                -- Retornar o Compass ao inventário após o uso (opcional)
                                item.Parent = backpack
                                wait(0.5) -- Delay antes de continuar para o próximo Compass
                            end
                        end
                    end
                end
            end)
        end
    end
end)

GlobalConfig['MainSection'] = StorageTab:CreateSection("Storage Utilities")

GlobalConfig['rareFruits'] = {
    "Vampire Fruit", "Quake Fruit", "Phoenix Fruit", "Dark Fruit",
    "Ope Fruit", "Venom Fruit", "Candy Fruit", "Hollow Fruit",
    "Chilly Fruit", "Gas Fruit", "Flare Fruit", "Light Fruit",
    "Smoke Fruit", "Sand Fruit", "Rumble Fruit", "Magma Fruit",
    "Snow Fruit", "Gravity Fruit", "Plasma Fruit"
}

GlobalConfig['Cache'] = {
    Player = { Inputfruitlist = {}, Inputfruitname = "" },
    Boolean = { StorageUsingGroup = {}, StorageKeepShiny = false }
}

GlobalConfig['Input'] = StorageTab:CreateInput({
    Name = "Devil Fruit Name",
    CurrentValue = "",
    PlaceholderText = "Enter fruit name...",
    RemoveTextAfterFocusLost = false,
    Flag = "InputFruitName",
    Callback = function(Text)
        Cache.Player.Inputfruitname = string.lower(tostring(Text))
    end
})

GlobalConfig['Button'] = StorageTab:CreateButton({
    Name = "Add All Rare & Ultra DF To List",
    Callback = function()
        for _, value in pairs(rareFruits) do
            table.insert(Cache.Player.Inputfruitlist, value)
        end
    end
})

GlobalConfig['Button'] = StorageTab:CreateButton({
    Name = "Add Devil Fruit To List",
    Callback = function()
        table.insert(Cache.Player.Inputfruitlist, Cache.Player.Inputfruitname)
    end
})

GlobalConfig['Button'] = StorageTab:CreateButton({
    Name = "Delete Last Devil Fruit From List",
    Callback = function()
        table.remove(Cache.Player.Inputfruitlist, #Cache.Player.Inputfruitlist)
    end
})

GlobalConfig['Button'] = StorageTab:CreateButton({
    Name = "Print Devil Fruit List",
    Callback = function()
GlobalConfig['Content'] = ""
        for Index, Value in pairs(Cache.Player.Inputfruitlist) do
            Content = string.format("%s Index: %s, Value: %s\n", Content, Index, Value)
        end
        print(Content)
    end
})

GlobalConfig['Toggle'] = StorageTab:CreateToggle({
    Name = "Keep All Shiny",
    CurrentValue = Cache.Boolean.StorageKeepShiny,
    Flag = "KeepShiny",
    Callback = function(Value)
        Cache.Boolean.StorageKeepShiny = Value
    end
})

for Index = 1, 12 do
GlobalConfig['Toggle'] = StorageTab:CreateToggle({
        Name = "Storage No." .. Index,
        CurrentValue = Cache.Boolean.StorageUsingGroup[Index] or false,
        Flag = "StorageToggle" .. Index,
        Callback = function(Value)
            Cache.Boolean.StorageUsingGroup[Index] = Value
        end
    })
end

local function CheckStorage(Number)
GlobalConfig['storageFrame'] = game.Players.LocalPlayer.PlayerGui.Storage.Frame["StoredDF"..Number]
    return storageFrame.Button.Text == "Store" and storageFrame.Visible == true
end

spawn(function()
    while wait() do
        pcall(function()
            for Index, Value in pairs(Cache.Boolean.StorageUsingGroup) do
                if Value and CheckStorage(Index) then
                    for _, Fruit in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        for _, FuritFormList in pairs(Cache.Player.Inputfruitlist) do
                            if Fruit.ClassName == "Tool" and 
                               (string.match(string.lower(Fruit.Name), string.lower(FuritFormList)) or 
                                (Cache.Boolean.StorageKeepShiny and Fruit:FindFirstChild("Main") and 
                                Fruit.Main:FindFirstChild("AuraAttachment"))) then
                                game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
                                Fruit.Parent = game.Players.LocalPlayer.Character
                                game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].StoredDFRequest:FireServer("StoredDF"..Index)
                                break
                            end
                        end
                    end
                end
            end
        end)
    end
end)

GlobalConfig['MainSection'] = FarmTab:CreateSection("Farm Utilities")

GlobalConfig['ToggleFarm'] = FarmTab:CreateToggle({
    Name = "Cannon Ball Mobs | All |",
    CurrentValue = false,
    Flag = "ToggleAutoBringMobs",
    Callback = function(ACN)
GlobalConfig['autocannon'] = ACN
    end    
    })


-- Função para ativar/desativar Haki
function ActivateHaki(state)
    pcall(function()
        if state then
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        else
            -- Se necessário, adicione lógica para desativar o Haki
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        end
    end)
end


spawn(function()
while wait(0) do
    pcall(function()
        if _G.autocannon then
            -- Iterar por todos os objetos "Enemies" no Workspace
            for _, v in pairs(game.Workspace.Enemies:GetChildren()) do
                -- Verifica se o nome contém o padrão que identifica um mob e possui a "HumanoidRootPart"
                if (string.find(v.Name, " Boar") or string.find(v.Name, "Crab") or 
                    string.find(v.Name, "Angry") or string.find(v.Name, "Bandit") or 
                    string.find(v.Name, "Thief") or string.find(v.Name, "Vokun") or 
                    string.find(v.Name, "Buster") or string.find(v.Name, "Freddy") or 
                    string.find(v.Name, "Bruno") or string.find(v.Name, "Thug") or 
                    string.find(v.Name, "Gunslinger") or string.find(v.Name, "Gunner") or 
                    string.find(v.Name, "Cave")) and v:FindFirstChild("HumanoidRootPart") then

                    -- Configuração para trazer o mob para o jogador
                    v.HumanoidRootPart.CanCollide = false
                    v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                    v.HumanoidRootPart.Anchored = true
                    v.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 4, -15)

                    -- Checar e destruir mobs com zero de vida
                    if v.Humanoid.Health == 0 then
                        v.HumanoidRootPart.Size = Vector3.new(0, 0, 0)
                        v:Destroy()
                    end
                end
            end
        end
    end)
end
end)

-- Equipar e usar o Cannon Ball
spawn(function()
while task.wait(0.5) do
    pcall(function()
        if _G.autocannon then
GlobalConfig['Plr'] = game.Players.LocalPlayer
GlobalConfig['toolname'] = "Cannon Ball"

            if Plr.Backpack:FindFirstChild(toolname) and not Plr.Character:FindFirstChild(toolname) and not Plr.Character:FindFirstChildOfClass("Tool") then
                Plr.Character.Humanoid:EquipTool(Plr.Backpack:FindFirstChild(toolname))
            end

GlobalConfig['cannon'] = Plr.Character:FindFirstChild(toolname)
            if cannon then
GlobalConfig['args'] = {
                    [1] = CFrame.new(Vector3.new(Plr.Character.HumanoidRootPart.Position))
                }
                cannon.RemoteEvent:FireServer(unpack(args))
            end
        end
    end)
end
end)

-- Manter os CannonBalls próximos ao jogador
spawn(function()
while task.wait(0.5) do
    pcall(function()
        if _G.autocannon then
            for _, v in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                if v.Name == "CannonBall" then
                    v.CFrame = game.Players.LocalPlayer.Character.Head.CFrame * CFrame.new(0, 2, -15)
                    v.CanCollide = false
                    if not v:FindFirstChild("BodyClip") then
GlobalConfig['Noclip'] = Instance.new("BodyVelocity")
                        Noclip.Name = "BodyClip"
                        Noclip.Parent = v
                        Noclip.MaxForce = Vector3.new(100000,100000,100000)
                        Noclip.Velocity = Vector3.new(0,20,0)
                    end
                end
            end
        end
    end)
end
end)

GlobalConfig['ToggleBehindFarm'] = FarmTab:CreateToggle({
    Name = "Auto Farm Mobs | Sword |",
    CurrentValue = false,
    Callback = function(state)
GlobalConfig['behindFarm'] = state -- Ativa ou desativa o autofarm
    end
})

GlobalConfig['MobList'] = { "Boar", "Crab", "Angry", "Thief", "Gunslinger", "Freddy" } -- Liste aqui os nomes dos mobs desejados.

-- Função para verificar se o mob está na lista
local function IsMobAllowed(mobName)
    for _, allowedMob in ipairs(MobList) do
        if string.find(mobName, allowedMob) then
            return true
        end
    end
    return false
end

-- Função para ativar/desativar Haki
function ActivateHaki(state)
    pcall(function()
        if state then
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        else
            -- Se necessário, adicione lógica para desativar o Haki
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        end
    end)
end

-- Função principal do autofarm
spawn(function()
    while task.wait(0.1) do
        pcall(function()
            if _G.behindFarm then
                for _, mob in pairs(game.Workspace.Enemies:GetChildren()) do
                    if mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") 
                       and mob.Humanoid.Health > 0 and IsMobAllowed(mob.Name) then
                       
                        -- Atacar o mob selecionado até que ele morra
                        while mob.Humanoid.Health > 0 and _G.behindFarm do
GlobalConfig['mobRoot'] = mob.HumanoidRootPart
GlobalConfig['playerRoot'] = game.Players.LocalPlayer.Character.HumanoidRootPart

                            -- Manter posição atrás do mob
                            playerRoot.CFrame = mobRoot.CFrame * CFrame.new(0, 0, 4)

                            -- Realizar ataques (sword ou melee)
GlobalConfig['tool'] = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
                            if tool then
                                tool:Activate() -- Atacar com a ferramenta equipada
                            else
                                -- Ataque melee padrão
                                game.Players.LocalPlayer.Character.Humanoid:MoveTo(mobRoot.Position)
                            end
                            task.wait(0.1)
                        end

                        -- Após matar o mob, sair do loop e procurar o próximo
                        break
                    end
                end
            end
        end)
    end
end)

GlobalConfig['Toggle'] = FarmTab:CreateToggle({
    Name = "Auto Collect Chest",
    CurrentValue = false,
    Flag = "AutoCollectChestToggle",
    Callback = function(Value)
        getgenv().autochest = Value
        if getgenv().autochest then
            spawn(function()
                while getgenv().autochest do
                    task.wait()
                    pcall(function()
                        for _, v in pairs(game.Workspace:GetDescendants()) do
                            if v.Name == "Touch" and v.Parent.Name == "TreasureChestPart" then
                                v.Parent.CFrame = game.Workspace[game.Players.LocalPlayer.Name].HumanoidRootPart.CFrame
                            end
                        end
                        task.wait(15)
                    end)
                end
            end)
        end
    end,
})

 
GlobalConfig['Toggle'] = FarmTab:CreateToggle({
   Name = "Auto Package",
   CurrentValue = false,
   Flag = "Auto Pacotes",
   Callback = function(APK)
    AutoPack = APK
end    
})

spawn(function()
while wait() do
    pcall(function()
     if AutoPack then
        wait(0.6)
            game.workspace:WaitForChild("Merchants"):WaitForChild("Merchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
        wait(0.001)
GlobalConfig['playernameuser'] = game.Players.LocalPlayer.Name
        if  game.Players.LocalPlayer.Backpack:FindFirstChild("Package") or game.Players.LocalPlayer.Character:FindFirstChild("Package") or game.workspace.playernameuser:FindFirstChild("Package") then
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.AffinityMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.Boat1Merchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.Boat2Merchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants:GetChildren()[16].HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.Boat3Merchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.Boat4Merchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.DrinkMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.BetterDrinkMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.ExpertiseMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))

            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.SniperMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1549, 264, 2136)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.SwordMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.KrizmaMerch.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.FishMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.FlailMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.FriendMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Package"))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.HeavyWeaponsMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.QuestMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.workspace.Merchants.EmoteMerchant.HumanoidRootPart.CFrame*CFrame.new(0,0,3.1)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))      
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-2610, 254, 1114)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))      
                wait(.5)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1982, 218, 567)
            game:GetService'VirtualUser':CaptureController()
            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))      
        end
    end
    end)
end
end)

GlobalConfig['Toggle'] = FarmTab:CreateToggle({
    Name = "Auto Stats Farm",
    CurrentValue = false,
    Flag = "AutoStatsFarmToggle",
    Callback = function(Value)
        getgenv().autostatsfarm = Value

        if getgenv().autostatsfarm then
            -- Auto Barrels Logic
            spawn(function()
GlobalConfig['user'] = tostring(game.Players.LocalPlayer.Name)
GlobalConfig['plrid'] = tostring(game.Players.LocalPlayer.UserId)
GlobalConfig['plr'] = tostring(game.Players.LocalPlayer)

                while getgenv().autostatsfarm do
                    task.wait()
                    pcall(function()
                        -- Claim Challenges
                        repeat task.wait() until game.Players[plr].PlayerGui.Challenges.Frame.Frame.ChallengesFrame.ScrollingFrame["Challenge_13"].Claim.AutoButtonColor == true
                        workspace.UserData["User_" .. plrid].ChallengesRemote:FireServer("Claim", "Challenge13")
                        workspace.UserData["User_" .. plrid].ChallengesRemote:FireServer("Claim", "Challenge14")
                    end)
                end
            end)

            spawn(function()
                local function collectBarrels()
                    for _, v in pairs(game.Workspace.Barrels:GetDescendants()) do
                        if v:IsA("ClickDetector") then
                            fireclickdetector(v)
                        end
                    end
                    for _, v in pairs(game.Workspace.Island8.Kitchen:GetDescendants()) do
                        if v:IsA("ClickDetector") then
                            fireclickdetector(v)
                        end
                    end
                end

GlobalConfig['user'] = tostring(game.Players.LocalPlayer.Name)

                while getgenv().autostatsfarm do
                    pcall(function()
                        -- Collect Barrels and Crates
                        for _, v in pairs(game.Workspace.Barrels.Barrels:GetDescendants()) do
                            if v.Name == "Barrel" then
                                game.Workspace[user].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
                                collectBarrels()
                                task.wait(0.1)
                            end
                        end

                        for _, v in pairs(game.Workspace.Barrels:GetDescendants()) do
                            if v.Name == "Crate" then
                                game.Workspace[user].HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 5, 0)
                                collectBarrels()
                                task.wait(0.1)
                            end
                        end

                        -- Return to Safe Zone
                        game.Workspace[user].HumanoidRootPart.CFrame = game.Workspace["SafeZoneOuterSpacePart"].CFrame * CFrame.new(0, 5, 0)
                        collectBarrels()
                        workspace.Merchants.FishMerchant.Clickable.Retum:FireServer()
                        task.wait(15)
                    end)
                end
            end)

            -- Auto Drink Mixer Logic
            spawn(function()
                while getgenv().autostatsfarm do
                    task.wait(4)
                    pcall(function()
                        for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                            if v:IsA("Tool") and (v.Name:find("Juice") or v.Name:find("Milk") or v.Name:find("Cider") or v.Name:find("Lemonade") or v.Name:find("Smoothie") or v.Name:find("Golden")) then
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                v:Activate()
                            end
                        end
                    end)
                end
            end)
        end
    end,
})


GlobalConfig['Toggle'] = FarmTab:CreateToggle({
    Name = "Auto Fish Farm",
    CurrentValue = false,
    Callback = function(AFH)
		AutoFish = AFH
	end    
})

spawn(function() -- fish farm
    while wait(0) do
        pcall(function()
            if AutoFish then
                wait(0.5)
GlobalConfig['CharacterName'] = game.Players.LocalPlayer.Character
GlobalConfig['position'] = CharacterName.HumanoidRootPart.CFrame * CFrame.new(0, 0, -15)
GlobalConfig['char'] = CharacterName.HumanoidRootPart
                char.CFrame = CFrame.new(-20000, 218, 20000)
        
GlobalConfig['b1'] = Instance.new("Part")
                b1.Shape = "Block"
                b1.Material = "Neon"
                b1.BrickColor = BrickColor.new("Hot Pink")
                b1.Anchored = true
                b1.Parent = game.Workspace
                b1.CFrame = CFrame.new(-20000, 213, 20000)
                b1.Size = Vector3.new(0.5, 0.1, 0.5)
                wait(0.5)
                for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                    if string.find(v.Name, "Rod") then
                        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                            if string.find(v.Name, "Rod") then
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                            end
                        end
                    end
                end
                for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if string.find(v.Name, "Rod") then
                        for _, x in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                            if string.find(x.Name, "Rod") then
                                for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                                    if v:FindFirstChild("Bobber") then
                                        if v.Bobber.Effect.Enabled == true then
                                            wait(0.6)
GlobalConfig['args'] = {
                                                [1] = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                                            }
                                            game:GetService("Players").LocalPlayer.Character:FindFirstChild(x.Name).Click:FireServer(unpack(args))
                                        end
                                    elseif v.Name == "Cast" and not v:FindFirstChild("Bobber") then
                                        wait(0.6)
GlobalConfig['args'] = {
                                            [1] = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                                        }
                                        game:GetService("Players").LocalPlayer.Character:FindFirstChild(x.Name).Click:FireServer(unpack(args))
                                        workspace:WaitForChild("Merchants"):WaitForChild("FishMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer()
                                    end
                                end
                            end
                        end
                    end
                end       
            end
        end)
    end
end);

GlobalConfig['Toggle'] = FarmTab:CreateToggle({
    Name = "Auto Get Haki (1000 Level)",
    CurrentValue = false,
    Callback = function(bool122)
        getgenv().haki = bool122
        while getgenv().haki do
            wait()
            pcall(function()
                workspace:WaitForChild("Merchants")
                    :WaitForChild("QuestHakiMerchant")
                    :WaitForChild("Clickable")
                    :WaitForChild("Retum")
                    :FireServer()
                wait(2)
            end)
        end
    end,
})

GlobalConfig['MainSection'] = FarmTab:CreateSection("Devil Fruits")

-- Toggle para Collect DF
GlobalConfig['CollectDFToggle'] = FarmTab:CreateToggle({
    Name = "Collect DF",
    CurrentValue = false,
    Flag = "CollectDF",
    Callback = function(Value)
        BringDF = Value
    end,
})

-- Loop para coletar DF automaticamente
spawn(function()
    while wait() do
        if BringDF then
            pcall(function()
                for _, v in pairs(game.Workspace.Trees.Tree.Model:GetChildren()) do 
                    if v:IsA("Tool") then 
                        fireclickdetector(v.Main.ClickDetector)
                    end
                end
            end)
        end
    end
end)

GlobalConfig['MainSection'] = FarmTab:CreateSection("Haki's Auto Farms")

GlobalConfig['hakitarget'] = 25
GlobalConfig['SliderHakiTarget'] = FarmTab:CreateSlider({
    Name = "Haki Target %",
    Range = {1, 100},
    Increment = 1,
    Suffix = "%",
    CurrentValue = 25,
    Flag = "HakiTargetSlider",
    Callback = function(gmm)
        hakitarget = gmm
    end,
})

GlobalConfig['hakispeed'] = 5
GlobalConfig['SliderHakiSpeed'] = FarmTab:CreateSlider({
    Name = "Haki Speed",
    Range = {1, 20},
    Increment = 1,
    Suffix = "",
    CurrentValue = 5,
    Flag = "HakiSpeedSlider",
    Callback = function(gttmm)
        hakispeed = gttmm
    end,
})

GlobalConfig['ToggleAutoFarmHaki'] = FarmTab:CreateToggle({
    Name = "Auto Farm Haki",
    CurrentValue = false,
    Flag = "AutoFarmHakiToggle",
    Callback = function(vccl)
        getgenv().concuvm = vccl
GlobalConfig['plrid'] = tostring(game.Players.LocalPlayer.UserId)
GlobalConfig['plr'] = tostring(game.Players.LocalPlayer)
GlobalConfig['concu'] = true
        while _G.concu do
            wait()
GlobalConfig['slv'] = game.Workspace.UserData["User_" .. plrid].Data.HakiLevel.Value
GlobalConfig['sss'] = slv / 100 * hakitarget
            if game.Workspace.UserData["User_" .. plrid].HakiBar.Value > sss and getgenv().concuvm == true then
GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['cache'] = {}
                local function lol(name)
                    if cache[name] then return cache[name] end
GlobalConfig['player'] = Players:FindFirstChild(name)
                    if player then
                        cache[name] = player.UserId
                        return player.UserId
                    end

                    local id
                    pcall(function()
                        id = Players:lol(name)
                    end)
                    cache[name] = id
                    return id
                end

GlobalConfig['ehh'] = game.Players.LocalPlayer.Name
GlobalConfig['Final'] = lol(ehh)
                for i = 1, hakispeed do
GlobalConfig['args'] = { [1] = "Off", [2] = 1 }
                    workspace.UserData["User_" .. Final].III:FireServer(unpack(args))
                    
GlobalConfig['args'] = { [1] = "On", [2] = 1 }
                    workspace.UserData["User_" .. Final].III:FireServer(unpack(args))
                end
            elseif game.Workspace.UserData["User_" .. plrid].HakiBar.Value <= sss and getgenv().concuvm == true then
GlobalConfig['args'] = { [1] = "Off", [2] = 1 }
                workspace.UserData["User_" .. plrid].III:FireServer(unpack(args))
                repeat task.wait() until game.Workspace.UserData["User_" .. plrid].HakiBar.Value >= slv
GlobalConfig['concu'] = true
            elseif getgenv().concuvm == false then
GlobalConfig['concu'] = false
GlobalConfig['args'] = { [1] = "Off", [2] = 1 }
                workspace.UserData["User_" .. plrid].III:FireServer(unpack(args))
            end
        end
    end,
})



GlobalConfig['MainSection'] = FarmTab:CreateSection("Safe Places Creation")

-- Botão para "Create Part"
GlobalConfig['CreatePartButton'] = FarmTab:CreateButton({
    Name = "Create Basic Safe Place",
    Callback = function()
GlobalConfig['CharacterName'] = game.Players.LocalPlayer.Character
GlobalConfig['position'] = CharacterName.HumanoidRootPart.CFrame * CFrame.new(0, 0, -15)
GlobalConfig['char'] = CharacterName.HumanoidRootPart
        char.CFrame = CFrame.new(-169, 640, -54)

GlobalConfig['b1'] = Instance.new("Part")
        b1.Shape = "Block"
        b1.Material = "Neon"
        b1.BrickColor = BrickColor.new("Hot Pink")
        b1.Anchored = true
        b1.Parent = game.Workspace
        b1.CFrame = CFrame.new(-169, 630, -54)
        b1.Size = Vector3.new(5, 0.1, 5)
    end,
})

-- Botão para "Create Part Permanent"
GlobalConfig['CreatePartPermanentButton'] = FarmTab:CreateButton({
    Name = "Create Improved Safe Place",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-169, 12050, -54)

GlobalConfig['b1'] = Instance.new("Part")
        b1.Shape = "Block"
        b1.Material = "Neon"
        b1.BrickColor = BrickColor.new("White")
        b1.Anchored = true
        b1.Parent = game.Workspace
        b1.CFrame = CFrame.new(-169, 12000, -54)
        b1.Size = Vector3.new(25, 0.1, 25)
    end,
})


-- Misc Tab - Inputs e Botões para Rejoin e Hop Server
GlobalConfig['MiscSection'] = MiscTab:CreateSection("Player Utilities")

GlobalConfig['Input'] = MiscTab:CreateInput({
    Name = "WalkSpeed",
    CurrentValue = "",
    PlaceholderText = "Enter WalkSpeed",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt)
GlobalConfig['player'] = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("CharacterTrait") then
            player.Character.CharacterTrait.WS.Value = tonumber(txt) or 1  -- Defina um valor padrão de 1 se o input for inválido
        end
    end
})


GlobalConfig['Input'] = MiscTab:CreateInput({
    Name = "Jump Power",
    CurrentValue = "",
    PlaceholderText = "Enter Jump Power",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt)
GlobalConfig['player'] = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.JumpPower = tonumber(txt) or player.Character.Humanoid.JumpPower
        end
    end
})

GlobalConfig['Input'] = MiscTab:CreateInput({
    Name = "Hip Height | Default 0 |",
    CurrentValue = "",
    PlaceholderText = "Enter Hip Height",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt)
GlobalConfig['player'] = game.Players.LocalPlayer
        if player and player.Character and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid.HipHeight = tonumber(txt) or player.Character.Humanoid.HipHeight
        end
    end
})

-- Toggle para Auto Turn ON Haki com intervalo
GlobalConfig['HakiToggle'] = MiscTab:CreateToggle({
    Name = "Auto Turn On Buso Haki",
    CurrentValue = false,
    Flag = "Auto Haki",
    Callback = function(Value)
        OnHaki = Value
    end,
})

-- Loop de ativação e desativação do Haki
spawn(function()
    while wait(0) do
        if OnHaki then
            -- Ativa o Haki por 2 minutos
            pcall(function()
                game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
            end)
            wait(240)  -- Espera 2 minutos

            -- Desativa o Haki por 4 minutos
            if OnHaki then  -- Confirmação de que o toggle ainda está ativado
                pcall(function()
                    game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
                end)
                wait(360)  -- Espera 4 minutos
            end
        else
            wait(1)  -- Pequeno atraso para evitar uso excessivo de recursos quando desativado
        end
    end
end)

GlobalConfig['Toggle'] = MiscTab:CreateToggle({
    Name = "Enable Black Screen",
    CurrentValue = false,
    Callback = function(Value)
GlobalConfig['lighting'] = game:GetService("Lighting")
GlobalConfig['colorCorrection'] = lighting:FindFirstChildOfClass("ColorCorrectionEffect")
        
        if not colorCorrection then
            colorCorrection = Instance.new("ColorCorrectionEffect")
            colorCorrection.Parent = lighting
        end

        colorCorrection.Brightness = Value and -1 or 0
    end,
})


GlobalConfig['Toggle'] = MiscTab:CreateToggle({
    Name = "Low Graphic Mode",  -- Nome do toggle
    CurrentValue = false,
    Callback = function(Value)
        -- Configurações do modo gráfico baixo
GlobalConfig['terrain'] = workspace:FindFirstChildOfClass('Terrain')
        if terrain then
            terrain.WaterWaveSize = Value and 0 or 10
            terrain.WaterWaveSpeed = Value and 0 or 10
            terrain.WaterReflectance = Value and 0 or 1
            terrain.WaterTransparency = Value and 0 or 0
        end
        
        -- Desativa sombras globais e define o fim da névoa
        game:GetService("Lighting").GlobalShadows = not Value
        game:GetService("Lighting").FogEnd = Value and 9e9 or 150
        
        -- Reduz a qualidade de renderização
        settings().Rendering.QualityLevel = Value and 1 or 2
        
        -- Alterações nos materiais e propriedades dos objetos no jogo
        for i, v in pairs(game:GetDescendants()) do
            if v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("MeshPart") or v:IsA("CornerWedgePart") or v:IsA("TrussPart") then
                v.Material = Value and "Plastic" or "SmoothPlastic"
                v.Reflectance = Value and 0 or 0.5
            elseif v:IsA("Decal") then
                v.Transparency = Value and 1 or 0
            elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                v.Lifetime = Value and NumberRange.new(0) or NumberRange.new(1, 10)
            elseif v:IsA("Explosion") then
                v.BlastPressure = Value and 1 or 10
                v.BlastRadius = Value and 1 or 10
            end
        end
        
        -- Desativa efeitos visuais pesados de iluminação
        for i, v in pairs(game:GetService("Lighting"):GetDescendants()) do
            if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
                v.Enabled = not Value
            end
        end
        
        -- Limpeza contínua de objetos que afetam o desempenho
        if Value then
            workspace.DescendantAdded:Connect(function(child)
                coroutine.wrap(function()
                    if child:IsA('ForceField') then
                        game:GetService('RunService').Heartbeat:Wait()
                        child:Destroy()
                    elseif child:IsA('Sparkles') then
                        game:GetService('RunService').Heartbeat:Wait()
                        child:Destroy()
                    elseif child:IsA('Smoke') or child:IsA('Fire') then
                        game:GetService('RunService').Heartbeat:Wait()
                        child:Destroy()
                    end
                end)()
            end)
        else
            workspace.DescendantAdded:Disconnect()
        end
    end,
})


GlobalConfig['AfkButton'] = MiscTab:CreateButton({
    Name = "Anti Afk",
    Callback = function()
GlobalConfig['vu'] = game:GetService("VirtualUser") -- ibraham moizoos
        print("ANTIAFK ENABLED")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            wait(1)
            vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        end)
    end,
})


GlobalConfig['MiscSection'] = MiscTab:CreateSection("Anchor Options")

-- Toggle para Anchor
GlobalConfig['ToggleAnchored'] = MiscTab:CreateToggle({
    Name = "Anchor Your Self",
    CurrentValue = false,
    Flag = "ToggleAnchored",
    Callback = function(value)
GlobalConfig['Player'] = game.Players.LocalPlayer.Character
        if Player and Player:FindFirstChild("HumanoidRootPart") then
            Player.HumanoidRootPart.Anchored = value
        end
    end
})

GlobalConfig['MiscSection'] = MiscTab:CreateSection("Jesus Mode")

-- Toggle para Jesus Mode
GlobalConfig['jesusModeEnabled'] = false
GlobalConfig['ToggleJesusMode'] = MiscTab:CreateToggle({
    Name = "Soft Fall / Float",
    CurrentValue = false,
    Flag = "ToggleJesusMode",
    Callback = function(jesusModeEnabled)
GlobalConfig['player'] = game.Players.LocalPlayer
GlobalConfig['character'] = player.Character or player.CharacterAdded:Wait()
GlobalConfig['rootPart'] = character:WaitForChild("HumanoidRootPart")

        if jesusModeEnabled then
            jesusModeConnection = game:GetService("RunService").Heartbeat:Connect(function()
                if rootPart.Velocity.Y < 0 then
                    rootPart.Velocity = Vector3.new(rootPart.Velocity.X, 0, rootPart.Velocity.Z)
                end
            end)
        else
            if jesusModeConnection then
                jesusModeConnection:Disconnect()
                jesusModeConnection = nil
            end
        end
    end
})

GlobalConfig['MiscSection'] = MiscTab:CreateSection("Server Utilities")

GlobalConfig['Button'] = MiscTab:CreateButton({
    Name = "Rejoin",
    Callback = function()
GlobalConfig['TeleportService'] = game:GetService("TeleportService")
GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['LocalPlayer'] = Players.LocalPlayer

GlobalConfig['Success, ErrorMessage'] = pcall(function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end)

        if ErrorMessage and not Success then
            warn(ErrorMessage)
        end
    end
})

GlobalConfig['ServerHopButton'] = MiscTab:CreateButton({
    Name = "Server Hop",
    Callback = function()
GlobalConfig['PlaceID'] = game.PlaceId
GlobalConfig['AllIDs'] = {}
GlobalConfig['foundAnything'] = ""
GlobalConfig['actualHour'] = os.date("!*t").hour
GlobalConfig['Deleted'] = false

        function TPReturner()
            local Site
            if foundAnything == "" then
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
            end

GlobalConfig['ID'] = ""
            if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
                foundAnything = Site.nextPageCursor
            end
GlobalConfig['num'] = 0
            for i, v in pairs(Site.data) do
GlobalConfig['Possible'] = true
                ID = tostring(v.id)
                if tonumber(v.maxPlayers) > tonumber(v.playing) then
                    for _, Existing in pairs(AllIDs) do
                        if num ~= 0 then
                            if ID == tostring(Existing) then
                                Possible = false
                            end
                        else
                            if tonumber(actualHour) ~= tonumber(Existing) then
GlobalConfig['delFile'] = pcall(function()
                                    -- delfile("NotSameServers.json")
                                    AllIDs = {}
                                    table.insert(AllIDs, actualHour)
                                end)
                            end
                        end
                        num = num + 1
                    end
                    if Possible == true then
                        table.insert(AllIDs, ID)
                        wait()
                        pcall(function()
                            -- writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                            wait()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer)
                        end)
                        wait(0.1)
                    end
                end
            end
        end

        function Teleport() 
            while wait() do
                pcall(function()
                    TPReturner()
                    if foundAnything ~= "" then
                        TPReturner()
                    end
                end)
            end
        end

        Teleport()
    end,
})



GlobalConfig['MiscSection'] = PlayerTab:CreateSection("Player Utilities")

-- Função de ir para o jogador
GlobalConfig['GoToPlayerInput'] = PlayerTab:CreateInput({
    Name = "Go to Player",
    CurrentValue = "",
    PlaceholderText = "Digite o nome do jogador",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(txt)
GlobalConfig['p1'] = game.Players.LocalPlayer.Character.HumanoidRootPart
GlobalConfig['p2'] = txt

        if game.Players:FindFirstChild(p2) then
            p1.CFrame = game.Players[p2].Character.HumanoidRootPart.CFrame
        else
            print("Jogador não encontrado!")
        end
    end,
})

-- Função de ir e voltar
GlobalConfig['GoAndBackInput'] = PlayerTab:CreateInput({
    Name = "Go and Back",
    CurrentValue = "",
    PlaceholderText = "Digite o nome do jogador",
    RemoveTextAfterFocusLost = false,
    Flag = "Input2",
    Callback = function(txt)
GlobalConfig['p1'] = game.Players.LocalPlayer.Character.HumanoidRootPart
GlobalConfig['p2'] = txt
GlobalConfig['pos'] = p1.CFrame

        if game.Players:FindFirstChild(p2) then
            p1.CFrame = game.Players[p2].Character.HumanoidRootPart.CFrame
            wait(1)
            p1.CFrame = pos
        else
            print("Jogador não encontrado!")
        end
    end,
})


GlobalConfig['Button'] = PlayerTab:CreateButton({
    Name = "All Seeing Eye - ( ESP )",
    Callback = function()
GlobalConfig['players'] = game:GetService("Players")
GlobalConfig['runService'] = game:GetService("RunService")
GlobalConfig['starterGui'] = game:GetService("StarterGui")
GlobalConfig['localPlayer'] = players.LocalPlayer
GlobalConfig['distanceThreshold'] = 20
        
        local function showNotification(title, text)
            starterGui:SetCore("SendNotification", {
                Title = title;
                Text = text;
                Duration = 5; 
            })
        end
        
        local function createESP(player)
            -- Criar Highlight para ESP
GlobalConfig['highlight'] = Instance.new("Highlight")
            highlight.Name = "ESPHighlight"
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0.5
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0) -- Cor vermelha para o contorno
            highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Cor vermelha para o preenchimento
        
            -- Adicionar Highlight ao personagem quando for carregado
            player.CharacterAdded:Connect(function(character)
                highlight.Adornee = character
                highlight.Parent = character
        
                -- Criar BillboardGui para o nome do jogador
GlobalConfig['billboardGui'] = Instance.new("BillboardGui")
                billboardGui.Name = "PlayerName"
                billboardGui.Adornee = character:FindFirstChild("HumanoidRootPart")
                billboardGui.Size = UDim2.new(0, 200, 0, 50)
                billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                billboardGui.AlwaysOnTop = true
        
GlobalConfig['textLabel'] = Instance.new("TextLabel", billboardGui)
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = player.Name
                textLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Cor vermelha para o nome
                textLabel.TextStrokeTransparency = 0.5
                textLabel.TextScaled = false  -- Desabilita o escalonamento automático
                textLabel.TextSize = 20  -- Define o tamanho fixo do texto (em pixels)
        
                billboardGui.Parent = character
            end)
        
            player.CharacterRemoving:Connect(function()
                if highlight then
                    highlight:Destroy()
                end
                if player.Character:FindFirstChild("PlayerName") then
                    player.Character:FindFirstChild("PlayerName"):Destroy()
                end
            end)
        
            if player.Character then
                highlight.Adornee = player.Character
                highlight.Parent = player.Character
        
                -- Criar BillboardGui se o personagem já estiver carregado
GlobalConfig['billboardGui'] = Instance.new("BillboardGui")
                billboardGui.Name = "PlayerName"
                billboardGui.Adornee = player.Character:FindFirstChild("HumanoidRootPart")
                billboardGui.Size = UDim2.new(0, 200, 0, 50)
                billboardGui.StudsOffset = Vector3.new(0, 2, 0)
                billboardGui.AlwaysOnTop = true
        
GlobalConfig['textLabel'] = Instance.new("TextLabel", billboardGui)
                textLabel.Size = UDim2.new(1, 0, 1, 0)
                textLabel.BackgroundTransparency = 1
                textLabel.Text = player.Name
                textLabel.TextColor3 = Color3.fromRGB(255, 0, 0) -- Cor vermelha para o nome
                textLabel.TextStrokeTransparency = 0.5
                textLabel.TextScaled = false  -- Desabilita o escalonamento automático
                textLabel.TextSize = 10  -- Define o tamanho fixo do texto (em pixels)
        
                billboardGui.Parent = player.Character
            end
        end
        
        local function updateESP()
            for _, player in pairs(players:GetPlayers()) do
                if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
GlobalConfig['highlight'] = player.Character:FindFirstChild("ESPHighlight")
                    if not highlight then
                        createESP(player)
                        highlight = player.Character:FindFirstChild("ESPHighlight")
                    end
        
                    -- Cor vermelha para todas as condições de destaque
                    highlight.FillColor = Color3.fromRGB(255, 0, 0) 
                    highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                end
            end
        end
        
        for _, player in pairs(players:GetPlayers()) do
            if player ~= localPlayer then
                createESP(player)
            end
        end
        
        players.PlayerAdded:Connect(function(player)
            if player ~= localPlayer then
                createESP(player)
            end
        end)
        
        players.PlayerRemoving:Connect(function(player)
            if player.Character and player.Character:FindFirstChild("ESPHighlight") then
                player.Character:FindFirstChild("ESPHighlight"):Destroy()
            end
            if player.Character and player.Character:FindFirstChild("PlayerName") then
                player.Character:FindFirstChild("PlayerName"):Destroy()
            end
        end)
        
        runService.RenderStepped:Connect(function()
            updateESP()
        end)
        
        -- Mostrar notificação de que o script está ativo


        
        Rayfield:Notify({
            Title = "ESP External Activated",
            Content = "Made By Plug ",
            Duration = 6.5,
            Image = 4483362458,
        })
        
    end,
 })

GlobalConfig['MiscSection'] = PlayerTab:CreateSection("Player Farming")

GlobalConfig['ToggleFarmPlayers'] = PlayerTab:CreateToggle({
    Name = "Cannon Ball Players | All |",
    CurrentValue = false,
    Flag = "ToggleAutoFarmPlayers",
    Callback = function(AFP)
GlobalConfig['autofarmplayers'] = AFP
    end    
})

-- Função para ativar/desativar Haki
function ActivateHaki(state)
    pcall(function()
        if state then
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        else
            -- Se necessário, adicione lógica para desativar o Haki
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        end
    end)
end

-- Função principal do AutoFarm para jogadores
spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autofarmplayers then
                -- Iterar por todos os jogadores no jogo
                for _, player in pairs(game.Players:GetPlayers()) do
                    -- Verificar se o jogador não é o próprio jogador e se está presente na Workspace
                    if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        -- Configurar para trazer o jogador para uma posição próxima
GlobalConfig['humanoidRootPart'] = player.Character.HumanoidRootPart
                        humanoidRootPart.CanCollide = false
                        humanoidRootPart.Anchored = true
                        humanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 4, -15)

                        -- Checar e lidar com jogadores eliminados (opcional)
                        if player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health == 0 then
                            humanoidRootPart.Anchored = false
                        end
                    end
                end
            end
        end)
    end
end)

-- Equipar e usar a ferramenta Cannon Ball em jogadores
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            if _G.autofarmplayers then
GlobalConfig['Plr'] = game.Players.LocalPlayer
GlobalConfig['toolname'] = "Cannon Ball"

                if Plr.Backpack:FindFirstChild(toolname) and not Plr.Character:FindFirstChild(toolname) and not Plr.Character:FindFirstChildOfClass("Tool") then
                    Plr.Character.Humanoid:EquipTool(Plr.Backpack:FindFirstChild(toolname))
                end

GlobalConfig['cannon'] = Plr.Character:FindFirstChild(toolname)
                if cannon then
GlobalConfig['args'] = {
                        [1] = CFrame.new(Vector3.new(Plr.Character.HumanoidRootPart.Position))
                    }
                    cannon.RemoteEvent:FireServer(unpack(args))
                end
            end
        end)
    end
end)

-- Manter Cannon Balls próximos aos jogadores
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            if _G.autofarmplayers then
                for _, v in pairs(game.workspace.ResourceHolder["Resources_" .. game.Players.LocalPlayer.UserId]:GetChildren()) do
                    if v.Name == "CannonBall" then
                        v.CFrame = game.Players.LocalPlayer.Character.Head.CFrame * CFrame.new(0, 2, -15)
                        v.CanCollide = false
                        if not v:FindFirstChild("BodyClip") then
GlobalConfig['Noclip'] = Instance.new("BodyVelocity")
                            Noclip.Name = "BodyClip"
                            Noclip.Parent = v
                            Noclip.MaxForce = Vector3.new(100000,100000,100000)
                            Noclip.Velocity = Vector3.new(0,20,0)
                        end
                    end
                end
            end
        end)
    end
end)

GlobalConfig['Toggle'] = PlayerTab:CreateToggle({
    Name = "Auto Click",
    CurrentValue = false,
  
 Callback = function(ACK)
         AutoClicking = ACK
     end    
 })
 
 spawn(function() 
 game:GetService("RunService").RenderStepped:Connect(function() 
 pcall(function() 
 if AutoClicking then 
 game:GetService'VirtualUser':CaptureController() 
 game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672)) 
 end 
 end) 
 end) 
 end);


GlobalConfig['SelectPlayer'] = ""
GlobalConfig['Tpplr'] = false

-- Obtenha a lista de jogadores atuais
GlobalConfig['PlayerList'] = {}
for _, player in pairs(game:GetService("Players"):GetPlayers()) do
    table.insert(PlayerList, player.Name)
end

local function forcePlayerDeath(player)
    -- Verifica se o jogador existe e tem um personagem
    if player and player.Character then
GlobalConfig['humanoid'] = player.Character:FindFirstChild("Humanoid")
        if humanoid then
            -- Força a morte do jogador, definindo a saúde para 0
            humanoid.Health = 0
            print(player.Name .. " foi forçado a morrer.")
        end
    end
end

GlobalConfig['SelectPlayer'] = ""

-- Obtenha a lista de jogadores atuais
GlobalConfig['PlayerList'] = {}
for _, player in pairs(game:GetService("Players"):GetPlayers()) do
    table.insert(PlayerList, player.Name)
end

-- Dropdown para selecionar o jogador
GlobalConfig['Dropdown'] = PlayerTab:CreateDropdown({
    Name = "Select Player",
    Options = PlayerList,  -- Usa a lista de jogadores como opções do dropdown
    CurrentOption = PlayerList[1] or "",  -- Define o primeiro jogador como padrão, se houver
    MultipleOptions = false,
    Flag = "PlayerDropdown",  -- Identificador único
    Callback = function(Option)
        SelectPlayer = Option[1]  -- Define o jogador selecionado
        print("Player selected:", SelectPlayer)  -- Opção de debug
    end,
})

-- Toggle para ativar/desativar a funcionalidade
GlobalConfig['ToggleFarmSelectedPlayer'] = PlayerTab:CreateToggle({
    Name = "Cannon Ball Selected Player",
    CurrentValue = false,
    Callback = function(AFP)
GlobalConfig['autofarmSelectedPlayer'] = AFP -- Controla o estado do autofarm para o jogador selecionado
    end
})

-- Função para ativar/desativar Haki
function ActivateHaki(state)
    pcall(function()
        if state then
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        else
            -- Se necessário, adicione lógica para desativar o Haki
            game.workspace.UserData["User_" .. game.Players.LocalPlayer.UserId].UpdateHaki:FireServer()
        end
    end)
end

-- AutoFarm para o jogador selecionado
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            if _G.autofarmSelectedPlayer and SelectPlayer ~= "" then
GlobalConfig['targetPlayer'] = game.Players:FindFirstChild(SelectPlayer)
                if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    -- Configurar para trazer o jogador para perto
GlobalConfig['humanoidRootPart'] = targetPlayer.Character.HumanoidRootPart
                    humanoidRootPart.CanCollide = false
                    humanoidRootPart.Anchored = true
                    humanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 4, -15)

                    -- Checar e lidar com jogadores eliminados (opcional)
                    if targetPlayer.Character:FindFirstChild("Humanoid") and targetPlayer.Character.Humanoid.Health == 0 then
                        humanoidRootPart.Anchored = false
                    end
                end
            end
        end)
    end
end)

-- Equipar e usar Cannon Ball automaticamente no jogador selecionado
spawn(function()
    while task.wait(0.5) do
        pcall(function()
            if _G.autofarmSelectedPlayer and SelectPlayer ~= "" then
GlobalConfig['Plr'] = game.Players.LocalPlayer
GlobalConfig['targetPlayer'] = game.Players:FindFirstChild(SelectPlayer)
GlobalConfig['toolname'] = "Cannon Ball"

                -- Verificar se o Cannon Ball está no Backpack e equipá-lo
                if Plr.Backpack:FindFirstChild(toolname) and not Plr.Character:FindFirstChild(toolname) and not Plr.Character:FindFirstChildOfClass("Tool") then
                    Plr.Character.Humanoid:EquipTool(Plr.Backpack:FindFirstChild(toolname))
                end

                -- Usar o Cannon Ball no jogador selecionado
GlobalConfig['cannon'] = Plr.Character:FindFirstChild(toolname)
                if cannon and targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
GlobalConfig['args'] = {
                        [1] = targetPlayer.Character.HumanoidRootPart.CFrame -- Atacar o jogador-alvo
                    }
                    cannon.RemoteEvent:FireServer(unpack(args))
                end
            end
        end)
    end
end)

-- Toggle para ativar a função Behind Player com movimento constante
GlobalConfig['Toggle'] = PlayerTab:CreateToggle({
    Name = "Behind Player",
    CurrentValue = false,
    Callback = function(TP)
        Tpplr = TP

        -- Se o toggle estiver ativado, inicia o loop para ficar atrás do jogador
        if Tpplr and SelectPlayer ~= "" then
            spawn(function()
                while Tpplr do
GlobalConfig['localPlayer'] = game.Players.LocalPlayer
GlobalConfig['targetPlayer'] = game.Players:FindFirstChild(SelectPlayer)

                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        -- Calcula a posição atrás do jogador selecionado
GlobalConfig['targetHRP'] = targetPlayer.Character.HumanoidRootPart
GlobalConfig['targetPosition'] = targetHRP.Position
GlobalConfig['behindPosition'] = targetPosition - targetHRP.CFrame.LookVector * 5

                        -- Define a orientação (rotação) do jogador local para igualar a do jogador alvo
GlobalConfig['targetOrientation'] = targetHRP.CFrame - targetHRP.Position

                        -- Move e orienta o jogador local para ficar alinhado atrás do jogador selecionado
                        localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(behindPosition) * targetOrientation.Rotation
                    else
                        print("Selected player not found or has no HumanoidRootPart")
                        break
                    end

                    wait(0.1) -- Intervalo de tempo entre cada atualização de posição
                end
            end)
        else
            print("Behind Player toggle deactivated")
        end
    end,
})

-- Atualizar a lista de jogadores caso algum jogador entre ou saia
game.Players.PlayerAdded:Connect(function(player)
    table.insert(PlayerList, player.Name)
    Dropdown:Refresh(PlayerList)  -- Atualiza o dropdown com a nova lista de jogadores
end)

game.Players.PlayerRemoving:Connect(function(player)
    for i, v in pairs(PlayerList) do
        if v == player.Name then
            table.remove(PlayerList, i)
            break
        end
    end
    Dropdown:Refresh(PlayerList)  -- Atualiza o dropdown com a lista atualizada de jogadores
end)

-- Atualiza a lista de jogadores
local function updatePlayerList()
GlobalConfig['players'] = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name ~= game.Players.LocalPlayer.Name then  -- Exclui o jogador local
            table.insert(players, player.Name)
        end
    end
    return players
end

-- Toggle para espectar o jogador
GlobalConfig['Toggle'] = PlayerTab:CreateToggle({
    Name = "Spectate Player",
    CurrentValue = false,
    Callback = function(Value)
        SpectatePlayer = Value
        if not Value then
            -- Voltar a câmera para o jogador local quando a toggle for desativada
            workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
        end
    end
})

-- Função para espectar um jogador específico
function spectate(targetPlayer)
    if targetPlayer and targetPlayer.Character then
        workspace.CurrentCamera.CameraSubject = targetPlayer.Character:FindFirstChild("Humanoid")
    end
end

-- Loop para verificar o estado do toggle e espectar o jogador selecionado
spawn(function()
    while task.wait(0.5) do
        if SpectatePlayer and SelectPlayer then
GlobalConfig['targetPlayer'] = game.Players:FindFirstChild(SelectPlayer)
            if targetPlayer then
                spectate(targetPlayer)
            else
                print("Player not found or unavailable:", SelectPlayer)
            end
        end
    end
end)

-- Atualiza a lista de jogadores dinamicamente (opcional)
game.Players.PlayerAdded:Connect(function(player)
    table.insert(PlayerList, player.Name)
    Dropdown:Refresh(PlayerList, PlayerList[1])
end)

game.Players.PlayerRemoving:Connect(function(player)
    for i, name in ipairs(PlayerList) do
        if name == player.Name then
            table.remove(PlayerList, i)
            break
        end
    end
    Dropdown:Refresh(PlayerList, PlayerList[1] or "")
end)


GlobalConfig['ShopSection'] = ShopTab:CreateSection("Drink Utilities - Bar")

GlobalConfig['Button'] = ShopTab:CreateButton({
    Name = "Instant Drink",
    Callback = function()
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v:IsA("Tool") and (string.find(v.Name, "Juice") 
                or string.find(v.Name, "Milk") 
                or string.find(v.Name, "Cider") 
                or string.find(v.Name, "Lemonade") 
                or string.find(v.Name, "Smoothie") 
                or string.find(v.Name, "Golden")) then
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                game:GetService('VirtualUser'):CaptureController()
                game:GetService('VirtualUser'):Button1Down(Vector2.new(1280, 672))
            end
        end
    end,
})

GlobalConfig['ShopSection'] = ShopTab:CreateSection("Buy Separate Drinks")

GlobalConfig['Button'] = ShopTab:CreateButton({
    Name = "Buy Cider+ Drink",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Cider+"
        }
        
        workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})

GlobalConfig['Button'] = ShopTab:CreateButton({
    Name = "Buy Lemonade+ Drink",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Lemonade+"
        }
        
        workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})

GlobalConfig['Button'] = ShopTab:CreateButton({
    Name = "Buy Juice+ Drink",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Juice+"
        }
        
        workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})

GlobalConfig['Button'] = ShopTab:CreateButton({
    Name = "Buy Smoothie+ Drink",
    Callback = function()
GlobalConfig['args'] = {
            [1] = "Smoothie+"
        }
        
        workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
    end
})


GlobalConfig['ShopSection'] = ShopTab:CreateSection("Auto Buy Drinks")

GlobalConfig['AutoCider'] = false
GlobalConfig['AutoLemonade'] = false
GlobalConfig['AutoJuice'] = false
GlobalConfig['AutoSmoothie'] = false

-- Toggling Auto Buy for each drink
GlobalConfig['ToggleCider'] = ShopTab:CreateToggle({
    Name = "Auto Buy Cider+ Drink",
    CurrentValue = false,
    Callback = function(value)
        AutoCider = value
    end
})

GlobalConfig['ToggleLemonade'] = ShopTab:CreateToggle({
    Name = "Auto Buy Lemonade+ Drink",
    CurrentValue = false,
    Callback = function(value)
        AutoLemonade = value
    end
})

GlobalConfig['ToggleJuice'] = ShopTab:CreateToggle({
    Name = "Auto Buy Juice+ Drink",
    CurrentValue = false,
    Callback = function(value)
        AutoJuice = value
    end
})

GlobalConfig['ToggleSmoothie'] = ShopTab:CreateToggle({
    Name = "Auto Buy Smoothie+ Drink",
    CurrentValue = false,
    Callback = function(value)
        AutoSmoothie = value
    end
})

-- Function to continuously buy a drink
spawn(function()
    while wait() do
        pcall(function()
            if AutoCider then
GlobalConfig['args'] = {
                    [1] = "Cider+"
                }
                workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
            end
        end)
    end
end)

spawn(function()
    while wait() do
        pcall(function()
            if AutoLemonade then
GlobalConfig['args'] = {
                    [1] = "Lemonade+"
                }
                workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
            end
        end)
    end
end)

spawn(function()
    while wait() do
        pcall(function()
            if AutoJuice then
GlobalConfig['args'] = {
                    [1] = "Juice+"
                }
                workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
            end
        end)
    end
end)

spawn(function()
    while wait() do
        pcall(function()
            if AutoSmoothie then
GlobalConfig['args'] = {
                    [1] = "Smoothie+"
                }
                workspace.Merchants.BetterDrinkMerchant.Clickable.Retum:FireServer(unpack(args))
            end
        end)
    end
end)

GlobalConfig['ShopSection'] = ShopTab:CreateSection("Weapons Utilities - Store")

GlobalConfig['ShopSection'] = ShopTab:CreateSection("Gun's")

-- Weapons Buttons
GlobalConfig['SlingshotButton'] = ShopTab:CreateButton({
    Name = "Slingshot (1,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Slingshot"
GlobalConfig['A_2'] = 1000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['StarsButton'] = ShopTab:CreateButton({
    Name = "Stars (5,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Stars"
GlobalConfig['A_2'] = 5000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['CrossbowButton'] = ShopTab:CreateButton({
    Name = "Crossbow (7,500 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Crossbow"
GlobalConfig['A_2'] = 7500
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['FlintlockButton'] = ShopTab:CreateButton({
    Name = "Flintlock (10,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Flintlock"
GlobalConfig['A_2'] = 10000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SniperMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['CannonButton'] = ShopTab:CreateButton({
    Name = "Cannon (400,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Cannon Ball"
GlobalConfig['A_2'] = 400000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.HeavyWeaponsMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

-- Divider
GlobalConfig['ShopSection'] = ShopTab:CreateSection("Swords")

-- Swords Buttons
GlobalConfig['DaggerButton'] = ShopTab:CreateButton({
    Name = "Dagger Sword (1,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Dagger"
GlobalConfig['A_2'] = 1000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['WakizashiButton'] = ShopTab:CreateButton({
    Name = "Wakizashi Sword (5,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Wakizashi"
GlobalConfig['A_2'] = 5000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['TachiButton'] = ShopTab:CreateButton({
    Name = "Tachi Sword (7,500 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Tachi"
GlobalConfig['A_2'] = 75000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['KatanaButton'] = ShopTab:CreateButton({
    Name = "Katana Sword (10,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Katana"
GlobalConfig['A_2'] = 10000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.SwordMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['FlailButton'] = ShopTab:CreateButton({
    Name = "Flail Sword (50,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Flail"
GlobalConfig['A_2'] = 50000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.FlailMerchant.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['KrizmaButton'] = ShopTab:CreateButton({
    Name = "Krizma Sword (80,000 beli)",
    Callback = function()
GlobalConfig['A_1'] = "Krizma"
GlobalConfig['A_2'] = 80000
GlobalConfig['Event'] = game:GetService("Workspace").Merchants.KrizmaMerch.Clickable.Retum
        Event:FireServer(A_1, A_2)
    end,
})

GlobalConfig['NpcSection'] = NpcTab:CreateSection("Npc's to Go")

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Rayleigh",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = game.workspace.Merchants.QuestHakiMerchant.HumanoidRootPart.CFrame
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Better Drink",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1493, 260, 2171)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Drink",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1282, 218, -1368)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Flail",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1110, 217, 3369)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "QuestFish",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1702, 216, -325)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Krizma",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1072, 361, 1669)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Sword",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1005, 224, -3339)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Sniper",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1843, 222, 3416)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Emote",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1522, 265, 2165)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Affinity",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(113, 278, 4952)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Fish",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1983, 218, 566)
    end
})

GlobalConfig['Button'] = NpcTab:CreateButton({
    Name = "Expertise",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(903, 270, 1219)
    end
})

-- Islands Tab

GlobalConfig['IslandsSection'] = IslandsTab:CreateSection("Islands to Go")

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Grassy",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(737, 241, 1209)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Kaizu",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1526.0230712891, 364.99990844727, 10510.020507812)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Snow Mountains",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(6501, 408, -1261)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Pursuer Boss",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(4847, 570, -7143)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Bar",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1522, 260, 2188)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Cliffs",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(4598, 217, 4964)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Windmill",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-7, 224, -91)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Cave",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-280, 217, -831)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Krizma",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1109, 341, 1645)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Sam",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1283, 218, -1348)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Green",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-2727, 253, 1041)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Trees",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1068, 217, 3351)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Pyramid",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(118, 216, 4773)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Merlin Fish",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1668, 217, -300)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Snowy",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1896, 222, 3385)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Mountain",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(2052, 488, -701)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Marine Ford",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-3164, 296, -3780)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Sand Castle",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1020, 224, -3277)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Forest",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-5781, 216, 114)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Evil",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-5169, 523, -7803)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Crescent",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(3193, 357, 1670)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Islands",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-4319, 245, 5252)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Town",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1818, 218, 755)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Rocky",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-37, 229, 2149)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Palm",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(766, 216, -1374)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Sand",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-2747, 216, -942)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Sand 2",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(162, 216, -2265)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Small",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(1237, 240, -244)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Tiny",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-1235, 223, 623)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Super Tiny",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(-4007, 216, -2190)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Grass",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = CFrame.new(2096, 217, -1884)
    end
})

GlobalConfig['Button'] = IslandsTab:CreateButton({
    Name = "Atlar",
    Callback = function()
GlobalConfig['char'] = game.Players.LocalPlayer.Character.HumanoidRootPart
        char.CFrame = game.workspace.Altar.RecepticalEffect.CFrame * CFrame.new(0, 5, 0)
    end
})

GlobalConfig['OthersSection'] = OtherTab:CreateSection("Claim Utilities")

GlobalConfig['Toggle'] = OtherTab:CreateToggle({
    Name = "Auto Claim Mission",
    CurrentValue = false,
    Flag = "Noone",
    Callback = function(AMS)
		AutoMission = AMS
	end    
})

spawn(function()
while wait() do 
if AutoMission then 
pcall(function() 
workspace.Merchants.ExpertiseMerchant.Clickable.Retum:FireServer()
end) 
end 
end 
end);

GlobalConfig['Toggle'] = OtherTab:CreateToggle({
    Name = "Auto Claim Beri Gift",
    CurrentValue = false,
    Flag = "Noone",
    Callback = function(ACG)
GlobalConfig['autoclaimgift'] = ACG
	end    
})

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaimgift then
GlobalConfig['A_1'] = "RewardMark"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ClaimRewardHourly
    Event:FireServer(A_1)
            end
        end)
    end
end);

GlobalConfig['Toggle'] = OtherTab:CreateToggle({
    Name = "Auto Claim Gems Gift",
    CurrentValue = false,
    Flag = "Noone",
    Callback = function(ACG)
GlobalConfig['autoclaimgift'] = ACG
	end    
})

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaimgift then
GlobalConfig['A_1'] = "RewardMark"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ClaimRewardDaily
    Event:FireServer(A_1)
            end
        end)
    end
end)

GlobalConfig['Toggle'] = OtherTab:CreateToggle({
    Name = "Auto Challenges",
    CurrentValue = false,
    Flag = "Noone",
    Callback = function(ACLL)
GlobalConfig['autoclaim'] = ACLL
	end    
})

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaim then
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Daily1"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Daily2"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Daily3"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Daily4"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
            end
        end)
    end
end)

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaim then
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Weekly1"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Weekly2"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Weekly3"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
            end
        end)
    end
end)

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaim then
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Monthly1"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Monthly2"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
            end
        end)
    end
end)

spawn(function()
    while wait(0) do
        pcall(function()
            if _G.autoclaim then
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge1"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge2"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge3"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge4"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge5"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge6"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge7"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge8"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge9"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge10"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge11"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge12"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge13"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
GlobalConfig['A_1'] = "Claim"
GlobalConfig['A_2'] = "Challenge14"
GlobalConfig['Event'] = game:GetService("Workspace").UserData["User_"..game.Players.LocalPlayer.UserId].ChallengesRemote
    Event:FireServer(A_1,A_2)
wait(.8)
            end
        end)
    end
end)

GlobalConfig['OthersSection'] = OtherTab:CreateSection("Auto Reroll Affinities")

local Toggle
GlobalConfig['isRunning'] = false -- Variável para controlar o loop

-- Criando o Toggle
ToggleGems = OtherTab:CreateToggle({
    Name = "Auto 2.0 Affinities | Gems |",
    CurrentValue = false,
    Callback = function(Value)
        isRunning1 = Value -- Atualiza o estado do loop com base no valor do toggle
        if isRunning1 then
            -- Inicia o loop se o toggle estiver ativado
            spawn(function()
                while isRunning1 do
                    wait(8) -- Intervalo do loop
GlobalConfig['player'] = game.Players.LocalPlayer
GlobalConfig['playerId'] = player.UserId
GlobalConfig['userDataName'] = game.Workspace.UserData["User_" .. playerId]

                    -- DFT1 Variables
GlobalConfig['AffMelee1'] = userDataName.Data.DFT1Melee.Value
GlobalConfig['AffSniper1'] = userDataName.Data.DFT1Sniper.Value
GlobalConfig['AffDefense1'] = userDataName.Data.DFT1Defense.Value
GlobalConfig['AffSword1'] = userDataName.Data.DFT1Sword.Value

                    -- DFT2 Variables
GlobalConfig['AffMelee2'] = userDataName.Data.DFT2Melee.Value
GlobalConfig['AffSniper2'] = userDataName.Data.DFT2Sniper.Value
GlobalConfig['AffDefense2'] = userDataName.Data.DFT2Defense.Value
GlobalConfig['AffSword2'] = userDataName.Data.DFT2Sword.Value

                    -- Check for DFT1
                    if AffSniper1 == 2 and AffSword1 == 2 and AffMelee1 == 2 and AffDefense1 == 2 then
                        script.Parent:Destroy()
                    end

                    -- Check for DFT2
                    if AffSniper2 == 2 and AffSword2 == 2 and AffMelee2 == 2 and AffDefense2 == 2 then
                        script.Parent:Destroy()
                    end

GlobalConfig['args1'] = {
                        [1] = "DFT1",
                        [2] = false, -- defense
                        [3] = false, -- melee
                        [4] = false, -- sniper
                        [5] = false, -- sword
                        [6] = "Gems"
                    }

GlobalConfig['args2'] = {
                        [1] = "DFT2",
                        [2] = false, -- defense
                        [3] = false, -- melee
                        [4] = false, -- sniper
                        [5] = false, -- sword
                        [6] = "Gems"
                    }

                    if AffDefense1 == 2 then
                        args1[2] = 0 / 0
                    end

                    if AffMelee1 == 2 then
                        args1[3] = 0 / 0
                    end

                    if AffSniper1 == 2 then
                        args1[4] = 0 / 0
                    end

                    if AffSword1 == 2 then
                        args1[5] = 0 / 0
                    end

                    if AffDefense2 == 2 then
                        args2[2] = 0 / 0
                    end

                    if AffMelee2 == 2 then
                        args2[3] = 0 / 0
                    end

                    if AffSniper2 == 2 then
                        args2[4] = 0 / 0
                    end

                    if AffSword2 == 2 then
                        args2[5] = 0 / 0
                    end

                    workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args1))
                    workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args2))
                end
            end)
        end
    end,
})



local ToggleBeri
GlobalConfig['isRunning2'] = false -- Variável para controlar o loop

-- Criando o Toggle
ToggleBeri = OtherTab:CreateToggle({
    Name = "Auto 2.0 Affinities | Beri |",
    CurrentValue = false,
    Callback = function(Value)
        isRunning2 = Value -- Atualiza o estado do loop com base no valor do toggle
        if isRunning2 then
            -- Inicia o loop se o toggle estiver ativado
            spawn(function()
                while isRunning2 do
                    wait(8) -- Intervalo do loop
GlobalConfig['player'] = game.Players.LocalPlayer
GlobalConfig['playerId'] = player.UserId
GlobalConfig['userDataName'] = game.Workspace.UserData["User_" .. playerId]

                    -- DFT1 Variables
GlobalConfig['AffMelee1'] = userDataName.Data.DFT1Melee.Value
GlobalConfig['AffSniper1'] = userDataName.Data.DFT1Sniper.Value
GlobalConfig['AffDefense1'] = userDataName.Data.DFT1Defense.Value
GlobalConfig['AffSword1'] = userDataName.Data.DFT1Sword.Value

                    -- DFT2 Variables
GlobalConfig['AffMelee2'] = userDataName.Data.DFT2Melee.Value
GlobalConfig['AffSniper2'] = userDataName.Data.DFT2Sniper.Value
GlobalConfig['AffDefense2'] = userDataName.Data.DFT2Defense.Value
GlobalConfig['AffSword2'] = userDataName.Data.DFT2Sword.Value

                    -- Check for DFT1
                    if AffSniper1 == 2 and AffSword1 == 2 and AffMelee1 == 2 and AffDefense1 == 2 then
                        script.Parent:Destroy()
                    end

                    -- Check for DFT2
                    if AffSniper2 == 2 and AffSword2 == 2 and AffMelee2 == 2 and AffDefense2 == 2 then
                        script.Parent:Destroy()
                    end

GlobalConfig['args1'] = {
                        [1] = "DFT1",
                        [2] = false, -- defense
                        [3] = false, -- melee
                        [4] = false, -- sniper
                        [5] = false, -- sword
                        [6] = "Cash"
                    }

GlobalConfig['args2'] = {
                        [1] = "DFT2",
                        [2] = false, -- defense
                        [3] = false, -- melee
                        [4] = false, -- sniper
                        [5] = false, -- sword
                        [6] = "Cash"
                    }

                    if AffDefense1 == 2 then
                        args1[2] = 0 / 0
                    end

                    if AffMelee1 == 2 then
                        args1[3] = 0 / 0
                    end

                    if AffSniper1 == 2 then
                        args1[4] = 0 / 0
                    end

                    if AffSword1 == 2 then
                        args1[5] = 0 / 0
                    end

                    if AffDefense2 == 2 then
                        args2[2] = 0 / 0
                    end

                    if AffMelee2 == 2 then
                        args2[3] = 0 / 0
                    end

                    if AffSniper2 == 2 then
                        args2[4] = 0 / 0
                    end

                    if AffSword2 == 2 then
                        args2[5] = 0 / 0
                    end

                    workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args1))
                    workspace:WaitForChild("Merchants"):WaitForChild("AffinityMerchant"):WaitForChild("Clickable"):WaitForChild("Retum"):FireServer(unpack(args2))
                end
            end)
        end
    end,
})

GlobalConfig['OthersSection'] = OtherTab:CreateSection("Fake Weapons")

-- Seastone Cestus Button
GlobalConfig['SeastoneButton'] = OtherTab:CreateButton({
    Name = "Seastone Cestus (500 melee requirement)",
    Callback = function()
GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['cache'] = {}

        local function getUserId(name)
            if cache[name] then return cache[name] end
GlobalConfig['player'] = Players:FindFirstChild(name)
            if player then
                cache[name] = player.UserId
                return player.UserId
            end

            local id
            pcall(function()
                id = Players:GetUserIdFromNameAsync(name)
            end)
            cache[name] = id
            return id
        end

GlobalConfig['playerName'] = game.Players.LocalPlayer.Name
GlobalConfig['userId'] = getUserId(playerName)
GlobalConfig['weaponName'] = "Seastone Cestus"
GlobalConfig['event'] = game:GetService("Workspace").UserData["User_" .. userId].UpdateMelee

        event:FireServer(weaponName)
    end,
})

-- Aqua Staff Button
GlobalConfig['AquaStaffButton'] = OtherTab:CreateButton({
    Name = "Aqua Staff (500 melee requirement)",
    Callback = function()
GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['cache'] = {}

        local function getUserId(name)
            if cache[name] then return cache[name] end
GlobalConfig['player'] = Players:FindFirstChild(name)
            if player then
                cache[name] = player.UserId
                return player.UserId
            end

            local id
            pcall(function()
                id = Players:GetUserIdFromNameAsync(name)
            end)
            cache[name] = id
            return id
        end

GlobalConfig['playerName'] = game.Players.LocalPlayer.Name
GlobalConfig['userId'] = getUserId(playerName)
GlobalConfig['weaponName'] = "Aqua Staff"
GlobalConfig['event'] = game:GetService("Workspace").UserData["User_" .. userId].UpdateMelee

        event:FireServer(weaponName)
    end,
})


GlobalConfig['SkillsSection'] = SkillsTab:CreateSection("PvP Utilities")

-- Slider para controlar a velocidade do Yoru
GlobalConfig['Slider'] = SkillsTab:CreateSlider({
    Name = "Yoru Speed",
    Range = {0, 10000}, -- Define o intervalo do slider
    Increment = 1, -- Aumentos em passos de 1
    Suffix = "Speed", -- Texto exibido após o valor no slider
    CurrentValue = 50, -- Valor inicial
    Callback = function(Value)
        Speeds = Value -- Atualiza a variável `Speeds` com o valor atual do slider
    end,
})

-- Toggle para ativar/desativar o Yoru Spam
GlobalConfig['Toggle'] = SkillsTab:CreateToggle({
    Name = "Yoru Spam",
    CurrentValue = false,
    Flag = "ToggleYoruSpam", -- Identificador único para a configuração
    Callback = function(Value)
GlobalConfig['Yoru'] = Value -- Ativa ou desativa o loop com base no valor do toggle
        if _G.Yoru then
            while _G.Yoru do
                wait()
GlobalConfig['Players'] = game:GetService("Players")
GlobalConfig['Plr'] = Players.LocalPlayer
GlobalConfig['Character'] = Plr.Character
GlobalConfig['Yoru'] = Character:FindFirstChild("Yoru")
                local Environment

                wait()
                pcall(function()
                    -- Obtém o ambiente associado ao Yoru
                    for i, v in pairs(getconnections(Yoru["RequestAnimation"].OnClientEvent)) do
                        Environment = getsenv(Yoru["AnimationController"])
                    end
                    wait()
                    -- Envia requisições ao servidor com base no valor de Speeds
                    for i = 1, Speeds do
                        Yoru["RequestAnimation"]:FireServer(Environment.PlaceId)
                    end
                end)
                wait()
            end
        end
    end,
})

GlobalConfig['Toggle'] = SkillsTab:CreateToggle({
    Name = "100% Skill",
    CurrentValue = false,
    Flag = "Auto100Skill",
    Callback = function(Value)
GlobalConfig['auto100rate'] = Value
        if _G.auto100rate then
            aaxc = hookmetamethod(game, "__namecall", function(self, ...)
GlobalConfig['args'] = { ... }
GlobalConfig['method'] = getnamecallmethod()
                if method == "FireServer" or method == "InvokeServer" then
                    if self.Name == "RemoteEvent" and args[3] == "StopCharging" and _G.auto100rate then
                        args[6] = 100 -- Define o valor como 100
                        return aaxc(self, unpack(args))
                    end
                end
                return aaxc(self, ...)
            end)
        end
    end,
})

GlobalConfig['Toggle'] = SkillsTab:CreateToggle({
    Name = "Anti Stun",
    CurrentValue = false,
    Flag = "AntiStunToggle",
    Callback = function(bool)
        getgenv().antistun = bool
        if getgenv().antistun then
            spawn(function()
                while getgenv().antistun do
                    wait()
                    pcall(function()
GlobalConfig['plr'] = game.Players.LocalPlayer.Character
                        repeat
                            -- Definindo os valores necessários para evitar "stun"
                            plr.BurnMagmaOverTime.Value = true
                            plr.BurnOverTime.Value = true
                            plr.CandyTouched.Value = true
                            plr.Cheshire.Value = true
                            plr.ChillyPunched.Value = true
                            plr["DF_Disabled"].Value = false
                            plr.GasPoison.Value = true
                            plr.GasAirless.Value = true
                            plr.GravityCrushed.Value = true
                            plr.HeartStolen.Value = true
                            plr.Hobbied.Value = true
                            plr.HotBody.Value = true
                            plr.HypnosisOnCooldown.Value = true
                            plr.LoveStunned.Value = true
                            plr.Mored.Value = true
                            plr.Negative.Value = true
                            plr.OpeSevered.Value = true
                            plr.Returned.Value = true
                            plr.RumbleStun.Value = true
                            plr.SanguineVampiris.Value = true
                            plr.SnowTouched.Value = true
                            plr.Stringing.Value = true
                            plr.VenomDoT.Value = true
                            wait(0.06)
                        until plr.Humanoid.Health == 0 or not getgenv().antistun
                    end)
                end
            end)
        end
    end,
})

GlobalConfig['WebhookSection'] = WebHookTab:CreateSection("Webhook Utilities")

GlobalConfig['HttpService'] = game:GetService("HttpService")

-- Variáveis globais
GlobalConfig['webhookEnabled'] = false
GlobalConfig['webhookURL'] = ""
GlobalConfig['sendInterval'] = 1 -- Intervalo padrão em minutos
GlobalConfig['sendLoopActive'] = false

-- Função para enviar dados para o webhook
local function sendWebhookData()
    if not webhookEnabled or webhookURL == "" then
        warn("Webhook desativada ou URL não definida.")
        return
    end

GlobalConfig['player'] = game.Players.LocalPlayer
GlobalConfig['userData'] = game.Workspace.UserData:FindFirstChild("User_" .. player.UserId)
    if not userData or not userData:FindFirstChild("Data") then
        warn("Dados do jogador não encontrados.")
        return
    end

GlobalConfig['Data'] = userData.Data
GlobalConfig['userData'] = game.Workspace.UserData:FindFirstChild("User_" .. player.UserId)
GlobalConfig['totalLevel'] = userData.TotalLevel.Value

    -- Seções do embed
GlobalConfig['generalPlayer'] = {
        { ["name"] = "Name", ["value"] = player.Name, ["inline"] = false },
        { ["name"] = "\n", ["value"] = "─────────────────────────────", ["inline"] = false },
        { ["name"] = "Beri", ["value"] = tostring(Data.Cash.Value), ["inline"] = true },
        { ["name"] = "Bounty", ["value"] = tostring(Data.Bounty.Value), ["inline"] = true },
        { ["name"] = "Kills", ["value"] = tostring(Data.Kills.Value), ["inline"] = true },
        { ["name"] = "Gems", ["value"] = tostring(Data.Gems.Value), ["inline"] = true },
        { ["name"] = "Expertise Level", ["value"] = tostring(Data.ExpertiseLevel.Value), ["inline"] = true },
        { ["name"] = "Compass Tokens", ["value"] = tostring(Data.CompassTokens.Value), ["inline"] = true },
    }

GlobalConfig['playerStats'] = {
        { ["name"] = "Defense Level", ["value"] = tostring(Data.DefenseLevel.Value), ["inline"] = true },
        { ["name"] = "Melee Level", ["value"] = tostring(Data.MeleeLevel.Value), ["inline"] = true },
        { ["name"] = "Sniper Level", ["value"] = tostring(Data.SniperLevel.Value), ["inline"] = true },
        { ["name"] = "Sword Level", ["value"] = tostring(Data.SwordLevel.Value), ["inline"] = true },
        { ["name"] = "Haki Level", ["value"] = tostring(Data.HakiLevel.Value), ["inline"] = true },
        { ["name"] = "Total Level", ["value"] = tostring(totalLevel), ["inline"] = true },
    }

GlobalConfig['playerDFStats'] = {
        { ["name"] = "DF1", ["value"] = Data.DevilFruit.Value, ["inline"] = true },
        { ["name"] = "DF2", ["value"] = Data.DevilFruit2.Value, ["inline"] = true },
        { ["name"] = "\n", ["value"] = "─────────────────────────────", ["inline"] = false },
        { ["name"] = "DFT1 Defense", ["value"] = tostring(Data.DFT1Defense.Value), ["inline"] = true },
        { ["name"] = "DFT1 Melee", ["value"] = tostring(Data.DFT1Melee.Value), ["inline"] = true },
        { ["name"] = "DFT1 Sniper", ["value"] = tostring(Data.DFT1Sniper.Value), ["inline"] = true },
        { ["name"] = "DFT1 Sword", ["value"] = tostring(Data.DFT1Sword.Value), ["inline"] = true },
        { ["name"] = "\n", ["value"] = "─────────────────────────────", ["inline"] = false },
        { ["name"] = "DFT2 Defense", ["value"] = tostring(Data.DFT2Defense.Value), ["inline"] = true },
        { ["name"] = "DFT2 Melee", ["value"] = tostring(Data.DFT2Melee.Value), ["inline"] = true },
        { ["name"] = "DFT2 Sniper", ["value"] = tostring(Data.DFT2Sniper.Value), ["inline"] = true },
        { ["name"] = "DFT2 Sword", ["value"] = tostring(Data.DFT2Sword.Value), ["inline"] = true },
    }
    
GlobalConfig['storedDevilFruits'] = {}
    for i = 1, 12 do
        table.insert(storedDevilFruits, {
            ["name"] = "StoredDF" .. i,
            ["value"] = Data["StoredDF" .. i].Value,
            ["inline"] = true,
        })
    end

    -- Envia os dados para o webhook
    http.request({
        Url = webhookURL,
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json'
        },
        Body = HttpService:JSONEncode({
            ["content"] = "",
            ["embeds"] = {
                {
                    ["title"] = "🌟 General Player",
                    ["color"] = tonumber(0xFF0000), -- Cor vermelha
                    ["fields"] = generalPlayer,
                },
                {
                    ["title"] = "🏅 Player Stats",
                    ["color"] = tonumber(0x000000), -- Cor preta
                    ["fields"] = playerStats,
                },
                {
                    ["title"] = "🍎 Player Devil Fruit Stats",
                    ["color"] = tonumber(0xFF0000), -- Cor vermelha
                    ["fields"] = playerDFStats,
                },
                {
                    ["title"] = "📦 Stored Devil Fruits",
                    ["color"] = tonumber(0x000000), -- Cor preta
                    ["fields"] = storedDevilFruits,
                }
            }
        }),
    })

    print("Dados enviados para o webhook.")
end

-- Loop para envio periódico
local function startWebhookLoop()
    if sendLoopActive then
        return
    end
    sendLoopActive = true

    while sendLoopActive do
        sendWebhookData()
        wait(sendInterval * 60) -- Tempo em minutos
    end
end

-- Controle de Input
GlobalConfig['Input'] = WebHookTab:CreateInput({
    Name = "Webhook URL",
    CurrentValue = "",
    PlaceholderText = "Insira o link da Webhook",
    RemoveTextAfterFocusLost = false,
    Flag = "WebhookInput",
    Callback = function(Text)
        webhookURL = Text
        print("Webhook URL definida: " .. webhookURL)
    end,
})

-- Controle de Toggle
GlobalConfig['Toggle'] = WebHookTab:CreateToggle({
    Name = "Ativar Webhook",
    CurrentValue = false,
    Flag = "WebhookToggle",
    Callback = function(Value)
        webhookEnabled = Value
        print("Webhook " .. (Value and "ativada" or "desativada"))

        if webhookEnabled then
            startWebhookLoop()
        else
            sendLoopActive = false
        end
    end,
})

-- Controle de Slider
GlobalConfig['Slider'] = WebHookTab:CreateSlider({
    Name = "Intervalo de Envio (min)",
    Range = {1, 60},
    Increment = 1,
    Suffix = " minutos",
    CurrentValue = 1,
    Flag = "WebhookSlider",
    Callback = function(Value)
        sendInterval = Value
        print("Intervalo de envio ajustado para: " .. sendInterval .. " minutos")
    end,
})
